import{_ as t,j as d,k as e,Y as r}from"./chunks/framework.b948d756.js";const a=JSON.parse('{"title":"前端开发指南","description":"","frontmatter":{},"headers":[],"relativePath":"dev/frontend.md"}'),o={name:"dev/frontend.md"},c=[r('<h1 id="前端开发指南" tabindex="-1">前端开发指南 <a class="header-anchor" href="#前端开发指南" aria-label="Permalink to &quot;前端开发指南&quot;">​</a></h1><blockquote><p>为什么要写这一节？</p><p>我希望不再是只有 Kami 一个风格，能有更多主题可供选择。</p></blockquote><p>此系统采用了前后端分离的形式，并没有提供模板渲染的选择，所以前端项目可以使用任何框架和架构设计。但是虽然开发比较自由，但是也存在诸多不便，比如接口调用和数据定义，路由约定上。所以在这一节，具体讲讲如何开发前端项目。</p><h2 id="路由约定" tabindex="-1">路由约定 <a class="header-anchor" href="#路由约定" aria-label="Permalink to &quot;路由约定&quot;">​</a></h2><p><a href="https://github.com/mx-space/kami" target="_blank" rel="noreferrer">Kami</a> 是由 NextJS、React 开发的，作为最最原始的项目，至今（截止 2021.12）已有近两年的历史，经过这些时间的沉淀，我希望前端项目路由的组织上能够遵守这一个约定。</p><blockquote><p>路由的约定能很大程度保证网站因更换不同前端主题导致 SEO 异常，死链接等问题。</p></blockquote><p>约定如下：</p><table><thead><tr><th>Path</th><th>Descrition</th><th>Mark</th></tr></thead><tbody><tr><td><code>/</code></td><td>主页</td><td>强制要求</td></tr><tr><td><code>/posts</code></td><td>博文列表</td><td>强制要求</td></tr><tr><td><code>/posts/:category/:slug</code></td><td>博文详情页</td><td>强制要求</td></tr><tr><td><code>/pages/:slug</code></td><td>独立页面详情页</td><td>强制要求</td></tr><tr><td><code>/notes/:nid</code></td><td>日记详情页</td><td>强制要求</td></tr><tr><td><code>/feed</code></td><td>RSS 订阅</td><td>强制要求</td></tr><tr><td><code>/:category/:slug</code></td><td>302 -&gt; <code>/posts/:category/:slug</code></td><td>建议</td></tr><tr><td><code>/category/:slug</code></td><td>分类中文章列表页</td><td>建议</td></tr><tr><td><code>/notes</code></td><td>日记列表或者跳转最新日记页</td><td>建议</td></tr><tr><td><code>/notes/latest</code></td><td>最新日记详情页</td><td>建议</td></tr><tr><td><code>/friends</code></td><td>友链</td><td>建议</td></tr><tr><td><code>/says</code></td><td>一言详情页</td><td>可选</td></tr><tr><td><code>/sitemap</code></td><td>站点地图</td><td>建议</td></tr><tr><td><code>/timeline</code></td><td>时间线</td><td>可选</td></tr><tr><td><code>/recently</code></td><td>动态页</td><td>可选</td></tr><tr><td><code>/favorite/:type</code></td><td>附加页</td><td>可选</td></tr><tr><td><code>/projects</code></td><td>项目页</td><td>可选</td></tr><tr><td><code>/projects/:id</code></td><td>项目详情页</td><td>可选</td></tr></tbody></table><h2 id="框架上的选择与建议" tabindex="-1">框架上的选择与建议 <a class="header-anchor" href="#框架上的选择与建议" aria-label="Permalink to &quot;框架上的选择与建议&quot;">​</a></h2><p>建议选择附带 SSR 功能的现代化框架：</p><ul><li>React：NextJS, <a href="https://github.com/rakkasjs/rakkasjs" target="_blank" rel="noreferrer">RakkasJS</a>, umi</li><li>Vue: Vite (vite-ssr), NuxtJS</li></ul><p>小程序：</p><ul><li>React: Remax, taro</li><li>Vue: uni-app</li></ul><h2 id="接口调用与-sdk-的使用" tabindex="-1">接口调用与 SDK 的使用 <a class="header-anchor" href="#接口调用与-sdk-的使用" aria-label="Permalink to &quot;接口调用与 SDK 的使用&quot;">​</a></h2><p>考虑到单独编写接口定义和返回类型太麻烦，这里提供一个 SDK 方便开发。</p><blockquote><p>SDK 仍在 beta 阶段，未来接口可能出现变化。</p></blockquote><p>详见：<a href="https://github.com/mx-space/core/tree/master/packages/api-client" target="_blank" rel="noreferrer">api-client</a></p>',17)];const s=t(o,[["render",function(t,r,a,o,s,l){return d(),e("div",null,c)}]]);export{a as __pageData,s as default};
